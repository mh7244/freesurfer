/**
 * @file  regdat2xfm.cpp
 * @brief REPLACE_WITH_ONE_LINE_SHORT_DESCRIPTION
 *
 * REPLACE_WITH_LONG_DESCRIPTION_OR_REFERENCE
 */
/*
 * Original Author: REPLACE_WITH_FULL_NAME_OF_CREATING_AUTHOR 
 * CVS Revision Info:
 *    $Author: nicks $
 *    $Date: 2011/03/02 00:04:35 $
 *    $Revision: 1.8 $
 *
 * Copyright Â© 2011 The General Hospital Corporation (Boston, MA) "MGH"
 *
 * Terms and conditions for use, reproduction, distribution and contribution
 * are found in the 'FreeSurfer Software License Agreement' contained
 * in the file 'LICENSE' found in the FreeSurfer distribution, and here:
 *
 * https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferSoftwareLicense
 *
 * Reporting: freesurfer@nmr.mgh.harvard.edu
 *
 */


#include <iostream>
#include <iomanip>
#if (__GNUC__ < 3)
#include "/usr/include/g++-3/alloc.h"
#endif
#include <string>

 
#include "error.h"
#include "mri.h"
#include "transform.h"
#include "talairachex.h"
#include "utils.h"
  const char *Progname="regdat2xfm";


using namespace std;

void usage() {
  cout << "regdat2xfm <srcvol> <targetvol> <regdat> <xfm>" << endl;
}

MATRIX *getRAS2RegRAS(MRI *mri) {
  MATRIX *i2regRAS=MatrixAlloc(4, 4, MATRIX_REAL);
  // stupid one
  *MATRIX_RELT(i2regRAS, 1, 1) = -mri->xsize ;
  *MATRIX_RELT(i2regRAS, 1, 4) = (mri->xsize)*(mri->width)/2.;
  *MATRIX_RELT(i2regRAS, 2, 3) =  mri->zsize ;
  *MATRIX_RELT(i2regRAS, 2, 4) = -(mri->zsize)*(mri->depth)/2;
  *MATRIX_RELT(i2regRAS, 3, 2) = -mri->ysize ;
  *MATRIX_RELT(i2regRAS, 3, 4) = (mri->zsize)*(mri->height)/2;
  *MATRIX_RELT(i2regRAS, 4, 4) = 1 ;

  MATRIX *r_to_i = extract_r_to_i(mri);

  MATRIX *res = MatrixMultiply(i2regRAS, r_to_i, NULL);
  MatrixFree(&i2regRAS);
  MatrixFree(&r_to_i);
  return res;
}

int main(int argc, char *argv[]) {
  if (argc < 4) {
    usage();
    return -1;
  }
  MRI *src = MRIread(argv[1]);
  MRI *dst = MRIread(argv[2]);
  // get the mri2frmi
  MATRIX *regSrc2Dest = MatrixAlloc(4,4, MATRIX_REAL);
  int type = TransformFileNameType(argv[3]);
  if (type == REGISTER_DAT) {
    FILE *fp = fopen(argv[3], "r");
    float r1,r2,r3,r4;
    char *cp;
    char line[STRLEN];
    cp = fgetl(line, 199, fp);
    cp = fgetl(line, 199, fp);
    cp = fgetl(line, 199, fp);
    cp = fgetl(line, 199, fp);
    cp = fgetl(line, 199, fp);
    sscanf(cp, "%f %f %f %f", &r1, &r2, &r3, &r4);
    *MATRIX_RELT(regSrc2Dest,1,1) = r1;
    *MATRIX_RELT(regSrc2Dest,1,2) = r2;
    *MATRIX_RELT(regSrc2Dest,1,3) = r3;
    *MATRIX_RELT(regSrc2Dest,1,4) = r4;
    cp = fgetl(line, 199, fp);
    sscanf(cp, "%f %f %f %f", &r1, &r2, &r3, &r4);
    *MATRIX_RELT(regSrc2Dest,2,1) = r1;
    *MATRIX_RELT(regSrc2Dest,2,2) = r2;
    *MATRIX_RELT(regSrc2Dest,2,3) = r3;
    *MATRIX_RELT(regSrc2Dest,2,4) = r4;
    cp = fgetl(line, 199, fp);
    sscanf(cp, "%f %f %f %f", &r1, &r2, &r3, &r4);
    *MATRIX_RELT(regSrc2Dest,3,1) = r1;
    *MATRIX_RELT(regSrc2Dest,3,2) = r2;
    *MATRIX_RELT(regSrc2Dest,3,3) = r3;
    *MATRIX_RELT(regSrc2Dest,3,4) = r4;
    cp = fgetl(line, 199, fp);
    sscanf(cp, "%f %f %f %f", &r1, &r2, &r3, &r4);
    *MATRIX_RELT(regSrc2Dest,4,1) = r1;
    *MATRIX_RELT(regSrc2Dest,4,2) = r2;
    *MATRIX_RELT(regSrc2Dest,4,3) = r3;
    *MATRIX_RELT(regSrc2Dest,4,4) = r4;
    fclose(fp);
  }
  // get ras2RegRAS
  MATRIX *ras2RegRAS = getRAS2RegRAS(src);
  MATRIX *ras2RegRAS2 = getRAS2RegRAS(dst);
  MATRIX *regRAS2RAS = MatrixInverse(ras2RegRAS2, NULL);

  //       src  ->  RAS
  //        |1       |
  //        V        V
  //       src  ->  regRAS
  //        |        |
  //        |        | (mri2fmri)
  //        V        V
  //       dst  ->  regRAS
  //        | 1      |
  //        V        V
  //       dst  ->  RAS
  //////////////////////////////////////////
  MATRIX *tmp = MatrixMultiply(regSrc2Dest, ras2RegRAS, NULL);
  MATRIX *ras2RAS = MatrixMultiply(regRAS2RAS, tmp, NULL);

  MatrixFree(&regSrc2Dest);
  MatrixFree(&ras2RegRAS2);
  MatrixFree(&ras2RegRAS);
  MatrixFree(&tmp);

  // now write MNI xfm
  FILE *fp = fopen(argv[4], "w") ;
  if (!fp)
    ErrorReturn(ERROR_NOFILE,
                (ERROR_NOFILE, "could not open file %s",argv[4]));

  fprintf(fp, "MNI Transform File\n") ;
  // now saves src and dst in comment line
  // now saves src and dst in comment line
  fprintf(fp, "%%Generated by %s src %s dst %s\n",
          Progname, argv[1], argv[2]) ;
  fprintf(fp, "\n") ;
  fprintf(fp, "Transform_Type = Linear;\n") ;
  fprintf(fp, "Linear_Transform =\n") ;

  for (int row = 1 ; row <= 3 ; row++) {
    fprintf(fp, "      %f       %f       %f       %f",
            *MATRIX_RELT(ras2RAS,row,1), *MATRIX_RELT(ras2RAS,row,2),
            *MATRIX_RELT(ras2RAS,row,3), *MATRIX_RELT(ras2RAS,row,4)) ;
    if (row == 3)
      fprintf(fp, ";") ;
    fprintf(fp, "\n") ;
  }
  fclose(fp);
  MatrixFree(&ras2RAS);
  MRIfree(&src);
  MRIfree(&dst);
}


