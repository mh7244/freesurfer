#!/bin/tcsh -f
# tkregisterfv

set VERSION = '$Id: tkregisterfv,v 1.9 2016/03/16 21:34:54 greve Exp $';

set subject = ();
set movvol = ();
set targ = ();
set fstarg = orig.mgz
set lta = ();
set surfs = 0;
set segcolor = $FREESURFER_HOME/FreeSurferColorLUT.txt
set segopacity = .3;
set UseTkRegister = 0;
set surfcolor = (yellow red yellow red);
set surflist = ();
set surflist0 = ();
set DoSurfs = 0;
set auxlist = ();
set auxreglist = ();
set segvol0 = ();
set segvol = ();
set Plane = cor
set ShowConfig = 1;
set altargs = ()
set movvol2 = ();
set reg2 = ()
set movvol3 = ();
set reg3 = ()
set UseVGLRun = 0

set tmpdir = ();
set cleanup = 1;
set LF = ();

set inputargs = ($argv);
set PrintHelp = 0;

if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif
set n = `echo $argv | grep -e -version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif

source $FREESURFER_HOME/sources.csh

goto parse_args;
parse_args_return:
goto check_params;
check_params_return:

set StartTime = `date`;
set tSecStart = `date '+%s'`;

#========================================================

if(! $UseTkRegister) then
  ### FreeView ####----------------------------------------------
  if(! -e $reg) then
    # Create registration if needed
    set cmd = (tkregister2_cmdl --mov $movvol --targ $targ --regheader \
      --reg /tmp/tmp.reg.$$.dat --ltaout $reg --regheader)
    if($#subject) set cmd = ($cmd --s $subject)
    echo $cmd 
    $cmd 
    if($status) then
      echo "cd `pwd`"
      echo "ERROR: $cmd"
      exit 1;
    endif
    rm /tmp/tmp.reg.$$.dat
  endif
  set cmd = (freeview)
  if($ShowConfig)  set cmd = ($cmd -transform-volume)
  set cmd = ($cmd -viewport $Plane) # currently causes FV to crash
  set targname = `basename $targ`
  set cmd = ($cmd -v $targ":"visible=0":"name=$targname"(targ)")
  @ nthaux = 0;
  foreach aux ($auxlist)
    @ nthaux = $nthaux + 1;
    if($auxreglist[$nthaux] == 0) set cmd = ($cmd $aux)
    if($auxreglist[$nthaux] != 0) set cmd = ($cmd $aux":"reg=$auxreglist[$nthaux])    
  end
  if($#segvol) set cmd = ($cmd -v "$segvol":"lut=$segcolor":"opacity=$segopacity":"colormap=lut")
  set movname = `basename $movvol`
  if($#reg == 1) set cmd = ($cmd $movvol":"name=$movname"(mov):"reg=$reg)
  if($#reg == 0) set cmd = ($cmd $movvol":"name=$movname"(mov)")
  if($#movvol2) then
    set movname2 = `basename $movvol2`
    if($#reg2 == 1) set cmd = ($cmd $movvol2":"name=$movname2"(mov2):"reg=$reg2)
    if($#reg2 == 0) set cmd = ($cmd $movvol2":"name=$movname2"(mov2)")
  endif
  if($#movvol3) then
    set movname3 = `basename $movvol3`
    if($#reg3 == 1) set cmd = ($cmd $movvol3":"name=$movname3"(mov3):"reg=$reg3)
    if($#reg3 == 0) set cmd = ($cmd $movvol3":"name=$movname3"(mov3)")
  endif
  @ nth = 0;
  foreach surf ($surflist)
    @ nth = $nth + 1;
    set cmd = ($cmd --surface $surf":"edgecolor=$surfcolor[$nth])
  end
  set cmd = ($cmd $altargs)
else
  ### tkregister ####----------------------------------------------
  set cmd = tkregister
  if($DoSurfs) set cmd = ($cmd -surfs)
endif
echo "cd `pwd`"
echo $cmd
if($UseVGLRun == 0) then
  $cmd
else
  setenv VGL_DISPLAY :0
  echo "Using VGL"
  exec /usr/pubsw/bin/vglrun $cmd
endif

#========================================================

exit 0

###############################################

############--------------##################
parse_args:
set cmdline = ($argv);

while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "--mov":
      if($#argv < 1) goto arg1err;
      set movvol = $argv[1]; shift;
      if(! -e $movvol) then
        echo "ERROR: cannot find $movvol"
        exit 1;
      endif
      set movvol = `getfullpath $movvol`
      breaksw

    case "--targ":
      if($#argv < 1) goto arg1err;
      set targ = $argv[1]; shift;
      if(! -e $targ) then
        echo "ERROR: cannot find $targ"
        exit 1;
      endif
      breaksw

    case "--aux":
      if($#argv < 1) goto arg1err;
      set auxvol = $argv[1]; shift;
      if(! -e $auxvol) then
        echo "ERROR: cannot find $auxvol"
        exit 1;
      endif
      set auxlist = ($auxlist `pwd`/$auxvol)
      if($#argv > 0) then
        set isarg = `isargflag $argv[1]`
        set auxreg = $argv[1]; shift;        
        if($auxreg != 0 && ! -e $auxreg) then
          echo "ERROR: cannot find $auxreg"
          exit 1;
        endif
        set auxreglist = ($auxreglist `pwd`/$auxreg)
      else
        set auxreglist = ($auxreglist 0)
      endif
      breaksw

    case "--fstarg":
      if($#argv < 1) goto arg1err;
      set fstarg = $argv[1]; shift;
      breaksw

    case "--subject":
    case "--s":
      if($#argv < 1) goto arg1err;
      set subject = $argv[1]; shift;
      set DoSurfs = 1;
      set surflist0 = (lh.white rh.white)
      set surfcolor = (yellow yellow);
      breaksw

    case "--sd":
      if($#argv < 1) goto arg1err;
      setenv SUBJECTS_DIR $argv[1]; shift
      breaksw

    case "--title":
      if($#argv < 1) goto arg1err;
      set title = $argv[1]; shift
      breaksw

    case "--seg":
      if($#argv < 1) goto arg1err;
      set segvol0 = $argv[1]; shift;
      if(! `isargflag $argv`) then
        set segcolor = $argv[1]; shift;
      endif
      breaksw

    case "--aseg":
      set segvol0 = aseg.mgz
      breaksw

    case "--aparc+aseg":
      set segvol0 = aparc+aseg.mgz
      breaksw

    case "--op":
    case "--opacity":
      if($#argv < 1) goto arg1err;
      set segopacity = $argv[1]; shift;
      breaksw

    case "--lta":
    case "--reg":
      if($#argv < 1) goto arg1err;
      set reg = $argv[1]; shift;
      set reg = `getfullpath $reg`
      breaksw

    case "--reg-header":
    case "--regheader":
      set regheader = 1;
      breaksw

    case "--mov2":
      if($#argv < 1) goto arg1err;
      set movvol2 = $argv[1]; shift;
      if(! -e $movvol2) then
        echo "ERROR: cannot find $movvol2"
        exit 1;
      endif
      set movvol2 = `getfullpath $movvol2`
      breaksw

    case "--lta2":
    case "--reg2":
      if($#argv < 1) goto arg1err;
      set reg2 = $argv[1]; shift;
      set reg2 = `getfullpath $reg2`
      breaksw

    case "--mov3":
      if($#argv < 1) goto arg1err;
      set movvol3 = $argv[1]; shift;
      if(! -e $movvol3) then
        echo "ERROR: cannot find $movvol3"
        exit 1;
      endif
      set movvol3 = `getfullpath $movvol3`
      breaksw

    case "--lta3":
    case "--reg3":
      if($#argv < 1) goto arg1err;
      set reg3 = $argv[1]; shift;
      set reg3 = `getfullpath $reg3`
      breaksw

    case "--surfs":
    case "--wm-surfs":
      set DoSurfs = 1;
      set surflist0 = (lh.white rh.white)
      set surfcolor = (yellow yellow);
      breaksw

    case "--lh-only":
      set DoSurfs = 1;
      set surflist0 = (lh.white)
      set surfcolor = (yellow)
      breaksw

    case "--rh-only":
      set DoSurfs = 1;
      set surflist0 = (rh.white)
      set surfcolor = (yellow)
      breaksw

    case "--pial-surfs":
      set DoSurfs = 1;
      set surflist0 = (lh.pial rh.pial)
      set surfcolor = (red red);
      breaksw

    case "--all-surfs":
      set DoSurfs = 1;
      set surflist0 = (lh.white lh.pial rh.white rh.pial)
      set surfcolor = (yellow red yellow red);
      breaksw

    case "--no-surfs":
      set DoSurfs = 0;
      set surflist0 = ()
      breaksw

    case "--surface":
    case "--surf":
      if($#argv < 1) goto arg1err;
      set mainsurf = $argv[1]
      set surflist0 = ($surflist0 $mainsurf); shift;
      breaksw

    case "--aux-surface":
    case "--aux-surf":
      if($#argv < 1) goto arg1err;
      set auxsurf = $argv[1]
      set surflist0 = ($surflist0 $auxsurf); shift;
      breaksw

    case "--plane":
      if ( $#argv == 0) goto arg1err;
      set Plane = $argv[1]; shift;
      if($Plane == cor) set Plane = coronal
      if($Plane == sag) set Plane = sagittal
      if($Plane == ax)  set Plane = axial
      breaksw

    case "--vgl":
    case "-vgl":
      set UseVGLRun = 1;
      breaksw

    case "--no-config"
      set ShowConfig = 0;
      breaksw

    case "--tkregister":
    case "--tkr":
      set UseTkRegister = 1;
      breaksw

    case "--nolog":
    case "--no-log":
      set LF = /dev/null
      breaksw

    case "--tmp":
    case "--tmpdir":
      if($#argv < 1) goto arg1err;
      set tmpdir = $argv[1]; shift;
      set cleanup = 0;
      breaksw

    case "--nocleanup":
      set cleanup = 0;
      breaksw

    case "--cleanup":
      set cleanup = 1;
      breaksw

    case "-debug":
    case "--debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    default:
      set altargs = ($altargs $flag)
      #echo ERROR: Flag $flag unrecognized. 
      #echo $cmdline
      #exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

if($#movvol == 0) then
  echo "ERROR: must spec a moveable volume"
  exit 1;
endif

if($#targ == 0) then
  if($#subject == 0 && $#reg == 0) then
    echo "ERROR: must spec either subject or reg or targ"
    exit 1;
  endif
  if($#subject == 0) then
    if(! -e $reg) then
      echo "ERROR: cannot find $reg"
      exit 1;
    endif
    set subject = `reg2subject --r $reg`
  endif
  if(! -e $SUBJECTS_DIR/$subject) then
    echo "ERROR: cannot find $subject"
    exit 1;
  endif
  set targ = $SUBJECTS_DIR/$subject/mri/$fstarg
  if(! -e $targ) then
    echo "ERROR: cannot find $targ"
    exit 1;
  endif
endif

if($#segvol0) then
  if(-e $segvol0) then
    set segvol = $segvol0
  else
    set segvol = $SUBJECTS_DIR/$subject/mri/$segvol0
  endif
  if(! -e $segvol) then
    echo "ERROR: cannot find $segvol"
    exit 1;
  endif
  if($#segcolor) then
    if(! -e $segcolor) then
      set segcolor0 = $segcolor;
      set segcolor = $SUBJECTS_DIR/$subject/mri/$segcolor0
      if(! -e $segcolor) then
        set segcolor = $FREESURFER_HOME/$segcolor0
        if(! -e $segcolor) then
          echo "ERROR: cannot find $segcolor0"
          exit 1; 
        endif
      endif
    endif
  endif
endif

foreach surf ($surflist0)
  if(-e $surf) then
    set surflist = ($surflist $surf)
  else
    set surfpath = $SUBJECTS_DIR/$subject/surf/$surf
    if(! -e $surfpath) then
      echo "ERROR: cannot find $surfpath"
      exit 1;
    endif
    set surflist = ($surflist $surfpath)
  endif
end

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################
arg2err:
  echo "ERROR: flag $flag requires two arguments"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo ""
  echo "This is a script that runs freeview with arguments like tkregister."
  echo "Not all tkregister functionality is replicated. Only uses LTA files."
  echo ""
  echo "tkregisterfv --mov mov --targ targ --reg reg.lta --s subject "
  echo "  --aux vol1 reg1 --aux vol2 reg2 ..."
  echo ""
  echo "  --fstarg volume : spec volume instead of $fstarg"
  echo "  --sd SUBJECTS_DIR"  
  echo "  --seg segvolume : load segvolume as well"  
  echo "  --aseg : load aseg.mgz as seg volume"  
  echo "  --aparc+aseg : load aparc+aseg.mgz as seg volume"  
  echo "  --opacity opacity : set seg opacity"
  echo "  --surfs : load lh and rh wm surfs"
  echo "  --pial-surfs : load pial surfs instead of wm surfs"
  echo "  --all-surfs : load both pial and wm surfs"
  echo "  --lh-only, --rh-only : surface hemisphere"
  echo "  --surf surfname : explicit path to surf to load"
  echo "  --aux-surf auxsurfname : explicit path to surf to load"
  echo "  --plane plane : cor, sag, ax"
  echo "  --no-config : do not automatically raise transform config window"
  echo "  --mov2 mov2 <--reg2 reg2> : provide a second mov (and possibly reg)"
  echo "  --mov3 mov3 <--reg3 reg3> : provide a third mov (and possibly reg)"
  echo ""
  if(! $PrintHelp) exit 1;
  echo $VERSION
  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
exit 1;

#---- Everything below here is printed out as part of help -----#
BEGINHELP

