#!/bin/tcsh -f
# tess1mm - sources
if(-e $FREESURFER_HOME/sources.csh) then
  source $FREESURFER_HOME/sources.csh
endif

set VERSION = '$Id$';

set hrsubject = ();
set hemilist = (lh rh);
set tess1mmname = tess1mm

set tmpdir = ();
set cleanup = 1;
set LF = ();

set inputargs = ($argv);
set PrintHelp = 0;
if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif
set n = `echo $argv | grep -e -version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif
goto parse_args;
parse_args_return:
goto check_params;
check_params_return:

set StartTime = `date`;
set tSecStart = `date '+%s'`;
set year  = `date +%Y`
set month = `date +%m`
set day   = `date +%d`
set hour   = `date +%H`
set min    = `date +%M`

setenv HR_SUBJECTS_DIR $SUBJECTS_DIR
set hrmdir = $HR_SUBJECTS_DIR/$hrsubject/mri
set subject = $tess1mmname # folder inside hires-subject
set outdir = $SUBJECTS_DIR/$hrsubject/$subject

setenv SUBJECTS_DIR $SUBJECTS_DIR/$hrsubject
set mdir = $outdir/mri
set sdir = $outdir/surf
mkdir -p $mdir/transforms $outdir/scripts $sdir

if($#tmpdir == 0) then
  if(-dw /scratch)   set tmpdir = /scratch/tmpdir.tess1mm.$$
  if(! -dw /scratch) set tmpdir = $outdir/tmpdir.tess1mm.$$
endif
#mkdir -p $tmpdir

# Set up log file
if($#LF == 0) then
  if($#hemilist == 1) then
    set LF = $outdir/tess1mm.Y$year.M$month.D$day.H$hour.M$min.$hemilist.log
  else
    set LF = $outdir/tess1mm.Y$year.M$month.D$day.H$hour.M$min.log
  endif
endif
if($LF != /dev/null) rm -f $LF
echo "Log file for tess1mm" >> $LF
date  | tee -a $LF
echo "" | tee -a $LF
echo "setenv SUBJECTS_DIR $SUBJECTS_DIR" | tee -a $LF
echo "cd `pwd`"  | tee -a $LF
echo $0 $inputargs | tee -a $LF
echo "" | tee -a $LF
cat $FREESURFER_HOME/build-stamp.txt | tee -a $LF
echo $VERSION | tee -a $LF
uname -a  | tee -a $LF
if($?PBS_JOBID) then
  echo "pbsjob $PBS_JOBID"  >> $LF
endif

#========================================================

cd $mdir

# Create 1mm conformed versions of wm and norm. These are used to run tessellate
foreach vol (wm.mgz norm.mgz) # brain needed if topo fixer run
  set cmd = (mri_convert $hrmdir/$vol --conform --no_scale 1 -rt nearest $vol)
  echo $cmd | tee -a $LF
  $cmd | tee -a $LF
  if($status) goto error_exit;
end
# Convert the aseg to 1mm
set cmd = (mri_label2vol --seg $hrmdir/aseg.auto_noCCseg.mgz --temp norm.mgz \
  --regheader $hrmdir/aseg.auto_noCCseg.mgz --o aseg.auto_noCCseg.mgz)
echo $cmd | tee -a $LF
$cmd | tee -a $LF
if($status) goto error_exit;
# Has to be uchar or mri_fill dies
set cmd = (mri_convert aseg.auto_noCCseg.mgz aseg.auto_noCCseg.mgz --no_scale 1 -odt uchar)
echo $cmd | tee -a $LF
$cmd | tee -a $LF
if($status) goto error_exit;

# Create talairach.lta for conformed space, needed by mri_fill
set cmd = (tkregister2_cmdl --mov norm.mgz --targ $hrmdir/norm.mgz --reg /tmp/junk.$$.dat \
  --ltaout transforms/conform.lta --regheader --noedit)
echo $cmd | tee -a $LF
$cmd | tee -a $LF
if($status) goto error_exit;
rm -f /tmp/junk.$$.dat
set cmd = (mri_concatenate_lta transforms/conform.lta $hrmdir/transforms/talairach.lta \
  transforms/talairach.lta)
echo $cmd | tee -a $LF
$cmd | tee -a $LF
if($status) goto error_exit;

# Run fill in the conformed space
# Mapping the filled.mgz directly to conformed space causes lots of defects
# Where to put the ponscc.cut.log file? Normally, it goes into the main folder
set cmd = (mri_fill -a ../scripts/ponscc.cut.log -xform transforms/talairach.lta \
  -segmentation aseg.auto_noCCseg.mgz wm.mgz filled.mgz)
echo $cmd | tee -a $LF
$cmd | tee -a $LF
if($status) goto error_exit;

cd $outdir
foreach hemi ($hemilist)
  if($hemi == lh) set vhemi = 255
  if($hemi == rh) set vhemi = 127

  # Pretess removes micro defects. In previous versions of this script, this command
  # was only run for 255 (left hemi), leaving the right hemi unchanged. 
  set cmd = (mri_pretess mri/filled.mgz $vhemi mri/norm.mgz mri/filled-pretess$vhemi.mgz)
  echo $cmd | tee -a $LF
  $cmd | tee -a $LF
  if($status) goto error_exit;

  set cmd = (mri_tessellate mri/filled-pretess$vhemi.mgz $vhemi surf/$hemi.orig.nofix)
  echo $cmd | tee -a $LF
  $cmd | tee -a $LF
  if($status) goto error_exit;

  set cmd = (mris_extract_main_component surf/$hemi.orig.nofix surf/$hemi.orig.nofix )
  echo $cmd | tee -a $LF
  $cmd | tee -a $LF
  if($status) goto error_exit;

  #mris_euler_number surf/$hemi.orig.nofix |& tee surf/$hemi.orig.nofix.eulerno

  # Below is for creating things needed by fix_topo
  if(0) then
  mris_smooth -nw -seed 1234 surf/$hemi.orig.nofix surf/$hemi.smoothwm.nofix
  if($status) goto error_exit;
  mris_inflate -no-save-sulc surf/$hemi.smoothwm.nofix surf/$hemi.inflated.nofix
  if($status) goto error_exit;
  mris_sphere -q -seed 1234 surf/$hemi.inflated.nofix surf/$hemi.qsphere.nofix
  if($status) goto error_exit;
  cp surf/$hemi.orig.nofix surf/$hemi.orig 
  if($status) goto error_exit;
  cp surf/$hemi.inflated.nofix surf/$hemi.inflated 
  if($status) goto error_exit;

  # fix_topo needs brain.mgz and wm.mgz
  # don't know whether brain.mgz and wm.mgz need to be conformed. mris_fix_topology may not 
  # do the right thing when vols are not conformed
  # fix_topo sends a lot of stuff to stderr
  #set cmd = (mris_fix_topology -mgz -sphere qsphere.nofix -ga -seed 1234 $subject $hemi)
  #$cmd |& tee scripts/mris_fix_topology.$hemi.log
  #if($status) goto error_exit;
  #pbsubmit -c "$cmd | tee scripts/mris_fix_topology.$hemi.log"
  #sleep 5
  endif

end

#========================================================

# Cleanup
# if($cleanup) rm -rf $tmpdir

# Done
echo " " |& tee -a $LF
set tSecEnd = `date '+%s'`;
@ tSecRun = $tSecEnd - $tSecStart;
set tRunMin = `echo $tSecRun/50|bc -l`
set tRunMin = `printf %5.2f $tRunMin`
set tRunHours = `echo $tSecRun/3600|bc -l`
set tRunHours = `printf %5.2f $tRunHours`
echo "Started at $StartTime " |& tee -a $LF
echo "Ended   at `date`" |& tee -a $LF
echo "Tess1mm-Run-Time-Sec $tSecRun" |& tee -a $LF
echo "Tess1mm-Run-Time-Min $tRunMin" |& tee -a $LF
echo "Tess1mm-Run-Time-Hours $tRunHours" |& tee -a $LF
echo " " |& tee -a $LF
echo "tess1mm Done" |& tee -a $LF
exit 0

###############################################

############--------------##################
error_exit:
echo "ERROR:"

exit 1;
###############################################

############--------------##################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "--o":
      if($#argv < 1) goto arg1err;
      set outdir = $argv[1]; shift;
      breaksw

    case "--s":
      if($#argv < 1) goto arg1err;
      set hrsubject = $argv[1]; shift;
      breaksw

    case "--name":
      if($#argv < 1) goto arg1err;
      set tess1mmname = $argv[1]; shift;
      breaksw

    case "--lh":
      set hemilist = (lh)
      breaksw

    case "--rh":
      set hemilist = (rh)
      breaksw

    case "--log":
      if($#argv < 1) goto arg1err;
      set LF = $argv[1]; shift;
      breaksw

    case "--nolog":
    case "--no-log":
      set LF = /dev/null
      breaksw

    case "--tmp":
    case "--tmpdir":
      if($#argv < 1) goto arg1err;
      set tmpdir = $argv[1]; shift;
      set cleanup = 0;
      breaksw

    case "--nocleanup":
      set cleanup = 0;
      breaksw

    case "--cleanup":
      set cleanup = 1;
      breaksw

    case "--debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

if($#hrsubject == 0) then
  echo "ERROR: must spec subject"
  exit 1;
endif
if(! -e $SUBJECTS_DIR/$hrsubject) then
  echo "ERROR: cannot find $hrsubject"
  exit 1;
endif

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################
arg2err:
  echo "ERROR: flag $flag requires two arguments"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo ""
  echo "tess1mm --s subject"
  echo "  --lh, --rh : do only lh or rh (default is both)"
  echo "  --name tess1mmfolder : default is tess1mm"
  echo ""
  echo ""

  if(! $PrintHelp) exit 1;
  echo $VERSION
  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
exit 1;

#---- Everything below here is printed out as part of help -----#
BEGINHELP

This script performs the tessellation of a subject in 1mm space in
order to avoid problems in the topology fixer when the tess is done at
high res (eg, cutting of a gyrus). This script creates a folder called
"tess1mm" in the subject folder, copies the data needed to run the
tessellation (converting to conformed space) and then runs
mri_tessellate. This script is called by the recon-all.v6.hires script
(a copy of the v6 recon-all modified to handle hires and T2/pial
better). recon-all.v6.hires runs this instead of the normal
tessellation, creates a link to the tess1mm/?h.orig.nofix, and then
continues with recon-all.




