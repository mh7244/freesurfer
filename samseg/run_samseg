#!/usr/bin/env fspython

import os
import sys
import argparse
import numpy as np
import json
import scipy.io
import freesurfer as fs

from freesurfer.gems import setGlobalDefaultNumberOfThreads, kvlReadCompressionLookupTable, kvlReadSharedGMMParameters
from freesurfer.samseg import Specification, registerAtlas, samsegment, initVisualizer, icv

# ------ Parse Command Line Arguments ------

parser = argparse.ArgumentParser()

# required
parser.add_argument('-o', '--output', metavar='FOLDER', dest='outputDirectory', help='output directory', required=True)
parser.add_argument('-i', '--input', action='append', metavar='FILE', dest='inputFileNames', help='input image(s)', required=True)
# optional processing options
parser.add_argument('--threads', type=int, default=os.environ.get('OMP_NUM_THREADS', 1), help='number of threads')
parser.add_argument('--init-lta', metavar='FILE', help='initial registration')
parser.add_argument('--reg-only', action='store_true', default=False, help='only perform registration')
parser.add_argument('-r', '--reg-mat', metavar='FILE', help='skip registration and read transform from file')
parser.add_argument('-a', '--atlas', metavar='DIR', help='Point to an alternative atlas directory.')
parser.add_argument('--no-brainmask', action='store_true', default=False, help='no initial brain masking based on affine atlas registration')
parser.add_argument('--diag-covs', action='store_true', default=False, help='use diagonal covariance matrices (only affect multi-contrast case)')
parser.add_argument('--stiffness', type=float, default=0.1, help='stiffness of the mesh (default is 0.1)')
parser.add_argument('--max-iters', type=int, default=100, help='maximum number of iterations')
parser.add_argument('--options', metavar='FILE', help='Override advanced options via a json file.')
# optional debugging options
parser.add_argument('--history', action='store_true', default=False, help='save history')
parser.add_argument('--showfigs', action='store_true', default=False, help='show figures during run')
parser.add_argument('--save-mesh', action='store_true', help='Save the final mesh in template space.')
parser.add_argument('--movie', action='store_true', default=False, help='show as arrow key controlled time sequence')
parser.add_argument('-v', '--verbose', action='store_true', default=False, help='verbose debug output')

args = parser.parse_args()

print('run_samseg Init VmPeak', fs.GetVmPeak())

# ------ Initial Setup ------

# Make sure freesurfer has been sourced
fs.checkfs()

# Start the process timer
timer = fs.Timer()

# Create the output folder
os.makedirs(args.outputDirectory, exist_ok=True)

# Specify the maximum number of threads the GEMS code will use
if args.threads is not None:
    setGlobalDefaultNumberOfThreads(args.threads)

# Remove previous cost log
costfile = os.path.join(args.outputDirectory, "cost.txt")
if os.path.exists(costfile):
    os.remove(costfile)

# Get the atlas directory
atlasDir = os.environ.get('SAMSEG_DATA_DIR')
if args.atlas:
    atlasDir = args.atlas
if not atlasDir:
    defaultAtlas = '20Subjects_smoothing2_down2_smoothingForAffine2'
    atlasDir = os.path.join(fs.fshome(), 'average/samseg', defaultAtlas)

# Setup the visualization tool
visualizer = initVisualizer(args.showfigs, args.movie)

# ------ Perform Affine Registration ------

print('run_samseg Performing Affine Reg VmPeak ', fs.GetVmPeak())

templateFileName = os.path.join(atlasDir, 'template.nii')
affineRegistrationMeshCollectionFileName = os.path.join(atlasDir, 'atlasForAffineRegistration.txt.gz')

if args.reg_mat:
    worldToWorldTransformMatrix = scipy.io.loadmat(args.reg_mat).get('worldToWorldTransformMatrix')
else:
    worldToWorldTransformMatrix = None

worldToWorldTransformMatrix, transformedTemplateFileName = registerAtlas(
    args.inputFileNames[0],
    affineRegistrationMeshCollectionFileName,
    templateFileName,
    args.outputDirectory,
    visualizer,
    worldToWorldTransformMatrix,
    args.init_lta
)

timer.mark('atlas registration complete')
if args.reg_only:
    print('registration-only requested, so quiting now')
    sys.exit()

# ------ Prepare Samsegment Parameters ------

# Load user options from a JSON file
if args.options:
    with open(args.options) as f:
        userOptions = json.load(f)
else:
    userOptions = {}

# Read the contents of 'compressionLookupTable.txt', and show the names of the structures being considered.
# The results are automatically sorted according to their 'compressed label', i.e., the first result corresponds to
# the first entry in the vector of probabilities associated with each node in our atlas mesh.
FreeSurferLabels, names, colors = kvlReadCompressionLookupTable(os.path.join(atlasDir, 'compressionLookupTable.txt'))

# Because we have many labels to segment, and each of these labels has its own Gaussian mixture model
# whose parameters (mean, variance, mixture weight) we have to estimate from the data, it may makes sense to restrict
# the degrees of freedom in the model somewhat by specifying that some of these labels have the same parameters
# governing their Gaussian mixture model. For example, we'd expect no intensity differences between the left and right
# part of each structure.
# The way we implement this is by defining 'super-structures' (i.e., a global white matter tissue class), and therefore
# work with a simplied ('reduced') model during the entire parameter estimation phase. At the same time we also build
# an inverse lookup table (mapping from original class number onto a reduced class number (super-structure)) that we
# will need to compute the final segmentation.
sharedGMMParameters = kvlReadSharedGMMParameters(os.path.join(atlasDir, 'sharedGMMParameters.txt'))

# Set model specifications
modelSpecifications = Specification({
    'FreeSurferLabels': FreeSurferLabels,
    'atlasFileName': os.path.join(atlasDir, 'atlas_level2.txt.gz'),
    'names': names,
    'colors': colors,
    'sharedGMMParameters': sharedGMMParameters,
    'useDiagonalCovarianceMatrices': args.diag_covs,
    'brainMaskingSmoothingSigma': 3.0,  # sqrt of the variance of a Gaussian blurring kernel
    'brainMaskingThreshold': -np.inf if args.no_brainmask else 0.01,
    'K': args.stiffness,  # stiffness of the mesh
    'biasFieldSmoothingKernelSize': 50,  # distance in mm of sinc function center to first zero crossing
}).merged(userOptions.get('modelSpecifications'))

# Set optimization specifications
userOptimizationOptions = userOptions.get('optimizationOptions')
optimizationOptions = Specification({
    'maximumNumberOfDeformationIterations': 20,
    'absoluteCostPerVoxelDecreaseStopCriterion': 1e-4,
    'verbose': args.verbose,
    'maximalDeformationStopCriterion': 0.001,  # measured in pixels
    'lineSearchMaximalDeformationIntervalStopCriterion': 0.001,
    'maximalDeformationAppliedStopCriterion': 0.0,
    'BFGSMaximumMemoryLength': 12,
    'multiResolutionSpecification': None  # resolution specification is set below
}).merged(userOptimizationOptions)

# Default parameters for each resolution level
defaultMultiResolution = Specification({
    'atlasFileName': None,
    'targetDownsampledVoxelSpacing': 1.0,
    'maximumNumberOfIterations': args.max_iters,
    'estimateBiasField': True
})

# Set the multi resolution level specifications
if userOptimizationOptions and userOptimizationOptions.get('multiResolutionSpecification'):
    multiResolutions = userOptimizationOptions.get('multiResolutionSpecification')
else:
    multiResolutions = [{
        'atlasFileName': os.path.join(atlasDir, 'atlas_level1.txt.gz'),
        'targetDownsampledVoxelSpacing': 2.0,
    }, {
        'atlasFileName': os.path.join(atlasDir, 'atlas_level2.txt.gz'),
        'targetDownsampledVoxelSpacing': 1.0,
    }]

optimizationOptions.multiResolutionSpecification = [defaultMultiResolution.merged(resolution) for resolution in multiResolutions]

# ------ Run Samsegment ------

print('run_samseg Running samsegment VmPeak', fs.GetVmPeak())

labels, names, volumes = samsegment(args.inputFileNames, transformedTemplateFileName, modelSpecifications, optimizationOptions,
                                    args.outputDirectory, visualizer, saveHistory=args.history, saveMesh=args.save_mesh)

# ------ Volumetric Stats ------

print('run_samseg Running volumetric stats VmPeak', fs.GetVmPeak())

# Write structural volumes
with open(os.path.join(args.outputDirectory, 'samseg.stats'), 'w') as fid:
    for volume, name in zip(volumes, names):
        fid.write('# Measure %s, %.6f, mm^3\n' % (name, volume))

# Write intracranial volume
sbtiv = icv(zip(*[names, volumes]))
with open(os.path.join(args.outputDirectory, 'sbtiv.stats'), 'w') as fid:
    fid.write('# Measure Intra-Cranial, %.6f, mm^3\n' % sbtiv)

print('#VMPC# run_samseg VmPeak', fs.GetVmPeak())
timer.mark('run_samseg complete')
