#!/usr/bin/env python

import os
import sys
import json
import scipy.io
import freesurfer as fs
from freesurfer.gems import setGlobalDefaultNumberOfThreads
from freesurfer.samseg import registerAtlas, samsegment, initVisualizer, icv


# ------ Parse Command Line Arguments ------

parser = fs.ArgParser()

# required
parser.add_argument('-o', '--output', metavar='DIR', dest='outputDirectory', help='Output directory.', required=True)
parser.add_argument('-i', '--input', action='append', metavar='FILE', dest='inputFileNames', help='Input image(s).', required=True)
# optional processing options
parser.add_argument('--threads', type=int, default=os.environ.get('OMP_NUM_THREADS', 1), help='Number of threads to use. Defaults to current OMP_NUM_THREADS or 1.')
parser.add_argument('--reg-only', action='store_true', default=False, help='Only perform initial affine registration.')
parser.add_argument('-r', '--reg-mat', metavar='FILE', help='Skip initial affine registration and read transform from file.')
parser.add_argument('--init-lta', metavar='FILE', help='Initial affine registration.')
parser.add_argument('-a', '--atlas', metavar='DIR', help='Point to an alternative atlas directory.')
parser.add_argument('--options', metavar='FILE', help='Override advanced options via a json file.')
# optional debugging options
parser.add_argument('--history', action='store_true', default=False, help='Save history.')
parser.add_argument('--showfigs', action='store_true', default=False, help='Show figures during run.')
parser.add_argument('--save-mesh', action='store_true', help='Save the final mesh in template space.')
parser.add_argument('--movie', action='store_true', default=False, help='Show history as arrow key controlled time sequence.')

args = parser.parse_args()

fs.printPeakMemory('run_samseg init')


# ------ Initial Setup ------

# Make sure freesurfer has been sourced
if not fs.fshome():
    fs.errorExit('FREESURFER_HOME must be set')

# Start the process timer
timer = fs.Timer()

# Create the output folder
os.makedirs(args.outputDirectory, exist_ok=True)

# Specify the maximum number of threads the GEMS code will use
if args.threads is not None:
    setGlobalDefaultNumberOfThreads(args.threads)

# Remove previous cost log
costfile = os.path.join( args.outputDirectory, "cost.txt" )
if os.path.exists( costfile ):
    os.remove( costfile ) 

# Get the atlas directory
atlasDir = os.environ.get('SAMSEG_DATA_DIR')
if args.atlas:
    atlasDir = args.atlas
if not atlasDir:
    defaultAtlas = '20Subjects_smoothing2_down2_smoothingForAffine2'
    atlasDir = os.path.join(fs.fshome(), 'average/samseg', defaultAtlas)

# Setup the visualization tool
visualizer = initVisualizer(args.showfigs, args.movie)

# ------ Perform Affine Registration ------

fs.printPeakMemory('run_samseg performing affine reg')

templateFileName = os.path.join(atlasDir, 'template.nii')
affineRegistrationMeshCollectionFileName = os.path.join(atlasDir, 'atlasForAffineRegistration.txt.gz')

if args.reg_mat:
    worldToWorldTransformMatrix = scipy.io.loadmat(args.reg_mat).get('worldToWorldTransformMatrix')
else:
    worldToWorldTransformMatrix = None

_, transformedTemplateFileName, optimizationSummary = registerAtlas( args.inputFileNames[0],
                                                                     affineRegistrationMeshCollectionFileName,
                                                                     templateFileName,
                                                                     args.outputDirectory,
                                                                     visualizer,
                                                                     worldToWorldTransformMatrix,
                                                                     args.init_lta
                                                                   )

# Save a summary of the optimization process
with open( costfile, "a") as file:
    file.write( "templateRegistration %d %f\n" % ( optimizationSummary[ 'numberOfIterations' ], 
                                                   optimizationSummary[ 'cost' ] ) )


timer.mark('atlas registration complete')
if args.reg_only:
    print('registration-only requested, so quiting now')
    sys.exit()

# ------ Prepare Samsegment Parameters ------

# Load user options from a JSON file
userModelSpecifications = {}
userOptimizationOptions = {}
if args.options:
    with open(args.options) as f:
        userOptions = json.load(f)
    if userOptions.get( 'modelSpecifications' ) is not None: 
        userModelSpecifications = userOptions.get( 'modelSpecifications' )
    if userOptions.get( 'optimizationOptions' ) is not None: 
        userOptimizationOptions = userOptions.get( 'optimizationOptions' )

# ------ Run Samsegment ------

fs.printPeakMemory('run_samseg running samsegment')

labels, names, volumes, optimizationSummary = \
    samsegment( args.inputFileNames, atlasDir, args.outputDirectory,
                transformedTemplateFileName=transformedTemplateFileName, 
                userModelSpecifications=userModelSpecifications, 
                userOptimizationOptions=userOptimizationOptions,
                visualizer=visualizer, saveHistory=args.history, saveMesh=args.save_mesh,
                targetIntensity=110, targetSearchStrings=[ 'Cerebral-White-Matter' ] )

# Save a summary of the optimization process
with open( costfile, "a" ) as file:
    for multiResolutionLevel, item in enumerate( optimizationSummary ):
        file.write( "atlasRegistrationLevel%d %d %f\n" % (multiResolutionLevel, item[ 'numberOfIterations' ], item[ 'perVoxelCost' ] ) )


# ------ Volumetric Stats ------

# Write structural volumes
with open(os.path.join(args.outputDirectory, 'samseg.stats'), 'w') as fid:
    for volume, name in zip(volumes, names):
        fid.write('# Measure %s, %.6f, mm^3\n' % (name, volume))

# Write intracranial volume
sbtiv = icv(zip(*[names, volumes]))
with open(os.path.join(args.outputDirectory, 'sbtiv.stats'), 'w') as fid:
    fid.write('# Measure Intra-Cranial, %.6f, mm^3\n' % sbtiv)

fs.printPeakMemory('#VMPC# run_samseg')
timer.mark('run_samseg complete')
